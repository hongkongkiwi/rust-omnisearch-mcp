name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy, llvm-tools-preview
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}
      
      - name: Check formatting
        run: just fmt-check
        
      - name: Run clippy
        run: just lint
        
      - name: Build
        run: just build
        
      - name: Run tests
        run: just test
        
      - name: Run doc tests
        run: cargo test --doc --all-features
      
      - name: Test feature combinations
        run: |
          cargo test --no-default-features --verbose
          cargo test --no-default-features --features server --verbose
          cargo test --no-default-features --features caching --verbose
          cargo test --no-default-features --features metrics --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
        
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install audit tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked
        
      - name: Run security audit
        run: just audit

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Run benchmarks
        run: just bench
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: target/criterion/report/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Build docs
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"
      
      - name: Deploy docs to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      
      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 1
          done
      
      - name: Run integration tests
        run: just test-integration
        env:
          REDIS_URL: redis://localhost:6379

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install MSRV Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.75" # From Cargo.toml rust-version
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv
      
      - name: Check compilation with MSRV
        run: just check-msrv

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-scopes: runtime
          fail-on-severity: moderate