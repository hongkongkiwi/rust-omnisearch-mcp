name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="v${{ steps.get_version.outputs.version }}"
          
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | head -1 || echo "")
          if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "$VERSION" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -10)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## ðŸš€ What's New in $VERSION
          
          ### Changes
          $COMMITS
          
          ### ðŸ“¦ Installation
          
          #### Download Pre-built Binaries
          Choose the appropriate binary for your platform from the assets below.
          
          #### Install via Cargo
          \`\`\`bash
          cargo install omnisearch-mcp
          \`\`\`
          
          #### Build from Source
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd rust-omnisearch-mcp
          cargo build --release
          \`\`\`
          
          ### ðŸ”§ Usage
          
          After installation, you can use omnisearch-mcp as an MCP server with Claude Desktop or other MCP-compatible clients.
          
          ### ðŸ“‹ Full Changelog
          
          For detailed changes, see the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md).
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: "ðŸŽ‰ Release v${{ steps.get_version.outputs.version }}"
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: omnisearch-mcp
            asset_name: omnisearch-mcp-linux-amd64
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: omnisearch-mcp
            asset_name: omnisearch-mcp-linux-arm64
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: omnisearch-mcp
            asset_name: omnisearch-mcp-macos-amd64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: omnisearch-mcp
            asset_name: omnisearch-mcp-macos-arm64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: omnisearch-mcp.exe
            asset_name: omnisearch-mcp-windows-amd64.exe
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash
      
      - name: Prepare Asset
        run: |
          mkdir -p assets
          cp ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} assets/${{ matrix.asset_name }}
          
          # Create checksums
          cd assets
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            assets/${{ matrix.asset_name }}
            assets/${{ matrix.asset_name }}.sha256

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Update version in Cargo.toml
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true